name: Cross-Platform Production Build

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release Type"
        required: true
        type: choice
        options: 
          - nightly
          - beta
          - stable
      target_platforms:
        description: "Target Platforms (comma-separated)"
        required: true
        type: string
        default: "windows,macos,linux"

env:
  CARGO_REGISTRY: "https://crates.io"
  FLUTTER_CHANNEL: "stable"
  BUILD_CACHE_KEY: "${{ github.run_id }}"

jobs:
  environment-setup:
    name: Initialize Build Environment
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Validate Input
        run: |
          VALID_PLATFORMS=("windows" "macos" "linux")
          IFS=',' read -ra INPUT_PLATFORMS <<< "${{ inputs.target_platforms }}"
          
          for platform in "${INPUT_PLATFORMS[@]}"; do
            if [[ ! " ${VALID_PLATFORMS[@]} " =~ " ${platform} " ]]; then
              echo "::error::Invalid platform: $platform"
              exit 1
            fi
          done

      - name: Generate Platform Matrix
        id: set-matrix
        run: |
          PLATFORM_MATRIX=$(jq -n --arg platforms "${{ inputs.target_platforms }}" '
            ($platforms | split(",")) as $plats |
            {
              include: [
                $plats[] | select(. == "windows") | { 
                  os: "windows-2022", 
                  rust_target: "x86_64-pc-windows-msvc",
                  llvm_path: "C:/Program Files/LLVM",
                  build_script: "build-windows.ps1"
                },
                $plats[] | select(. == "macos") | {
                  os: "macos-13",
                  rust_target: "x86_64-apple-darwin", 
                  llvm_path: "/usr/local/opt/llvm",
                  build_script: "build-macos.sh"
                },
                $plats[] | select(. == "linux") | {
                  os: "ubuntu-22.04",
                  rust_target: "x86_64-unknown-linux-gnu",
                  llvm_path: "/usr/lib/llvm-16",
                  build_script: "build-linux.sh"
                }
              ]
            }
          ')
          echo "matrix=$PLATFORM_MATRIX" >> $GITHUB_OUTPUT

  build-artifacts:
    name: Build (${{ matrix.os }})
    needs: environment-setup
    strategy:
      matrix: ${{ fromJson(needs.environment-setup.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Platform Toolchain Setup
        env:
          LLVM_VERSION: "16.0.6"
        run: |
          case "${{ matrix.os }}" in
            windows-2022)
              choco install -y llvm --version=$env:LLVM_VERSION --allow-downgrade
              choco install -y flutter --version=3.13.9
              Add-Content $env:GITHUB_PATH "C:\Program Files\LLVM\bin"
              ;;
            macos-13)
              brew install llvm@16
              brew install flutter
              sudo xcode-select -s /Applications/Xcode_15.1.app
              echo "/usr/local/opt/llvm/bin" >> $GITHUB_PATH
              ;;
            ubuntu-22.04)
              sudo apt-get install -y clang-16 lld-16 llvm-16-dev
              sudo snap install flutter --classic
              echo "/usr/lib/llvm-16/bin" >> $GITHUB_PATH
              ;;
          esac

      - name: Configure Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          targets: ${{ matrix.rust_target }}
          override: true

      - name: Cache Optimization
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.pub-cache
            ${{ matrix.os == 'windows-2022' && 'C:\ProgramData\chocolatey\lib' || '$RUNNER_WORKSPACE' }}
          key: ${{ matrix.os }}-${{ env.BUILD_CACHE_KEY }}-${{ hashFiles('&zwnj;**/Cargo.lock') }}-${{ hashFiles('**&zwnj;/pubspec.lock') }}

      - name: Build Execution
        env:
          LLVM_SYS_160_PREFIX: ${{ matrix.llvm_path }}
        run: |
          flutter precache --force
          dart pub global activate flutter_rust_bridge_codegen
          
          # Generate FFI Bindings
          flutter_rust_bridge_codegen \
            --rust-input lib/src/ffi.rs \
            --dart-output lib/generated/bridge.dart \
            --llvm-path "${{ matrix.llvm_path }"

          # Platform-specific Build
          ./scripts/${{ matrix.build_script }} \
            --target ${{ matrix.rust_target }} \
            --release-type ${{ inputs.release_type }}

      - name: Artifact Validation
        run: |
          case "${{ matrix.os }}" in
            windows-2022)
              signtool verify /pa target/${{ matrix.rust_target }}/release/*.exe
              ;;
            macos-13)
              codesign -dv target/${{ matrix.rust_target }}/release/*.app
              ;;
            ubuntu-22.04)
              gpg --verify *.deb
              ;;
          esac

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ inputs.release_type }}-build
          path: |
            target/${{ matrix.rust_target }}/release/
            **/*.bundle
            **/*.deb
            **/*.msi
          retention-days: 7

  post-build:
    name: Finalize Release
    needs: [build-artifacts]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Aggregate Results
        run: |
          echo "Build Summary:"
          echo "Release Type: ${{ inputs.release_type }}"
          echo "Platforms: ${{ inputs.target_platforms }}"
          echo "Run ID: ${{ github.run_id }}"

      - name: Notification
        if: ${{ failure() || success() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: 'main',
              inputs: {
                build_id: '${{ github.run_id }}',
                status: '${{ job.status }}'
              }
            })
